@{
    Layout = null;
    var now = DateTime.Now.ToString("dd-MM-yyyy hh:mm tt");
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Counter Sale</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            background: #f0f0f0;
            padding-bottom: 180px;
        }

        .header {
            background-color: #009999;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            font-size: 18px;
        }

        .nav-row {
            background-color: white;
            color: #009999;
            font-weight: bold;
            padding: 10px 0;
            display: grid;
            grid-template-columns: 1fr 3fr 2fr 1fr 1fr 1fr 1fr;
            text-align: center;
            border-bottom: 1px solid #ccc;
        }

        .row {
            display: grid;
            grid-template-columns: 1fr 3fr 2fr 1fr 1fr 1fr 1fr;
            text-align: center;
        }

            .row input {
                border: none;
                padding: 10px;
                text-align: center;
                font-size: 15px;
                width: 100%;
                box-sizing: border-box;
            }

        .default-row {
            background-color: #009999;
        }

            .default-row input {
                background: #009999;
                color: white;
            }

        .srno-filled {
            background-color: white !important;
            color: green !important;
            font-weight: bold;
        }

        input:focus {
            outline: 2px solid #007bff;
        }

        .footer-bar {
            background-color: #009999;
            color: white;
            display: flex;
            justify-content: flex-start;
            padding: 12px 20px;
            font-size: 16px;
            position: fixed;
            bottom: 90px;
            width: 100%;
            z-index: 10;
        }

        .shortcuts {
            font-family: monospace;
        }

        .total-box {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 90px;
            background-color: white;
            color: black;
            padding: 25px 20px;
            font-size: 22px;
            font-weight: bold;
            border-top: 1px solid #ccc;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            box-sizing: border-box;
            z-index: 9;
        }

            .total-box .label {
                margin-right: 10px;
                color: #009999;
            }

            .total-box span#totalAmount {
                max-width: 200px;
                overflow: hidden;
                white-space: nowrap;
                text-overflow: ellipsis;
            }

        /* --- MODAL --- */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.4);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            width: 96%;
            height: 80vh;
            max-width: 1400px;
            background: white;
            border-radius: 8px;
            overflow-y: auto;
            padding: 20px;
            margin: 5vh auto;
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
        }

        .selected-row .sn::before {
            content: "✓ ";
            color: green;
            font-weight: bold;
        }

        .selected-row {
            background-color: #eaffea !important;
        }


        #selectedTotalBox {
            position: fixed;
            bottom: 90px;
            right: 20px;
            background: #fff;
            color: #009999;
            font-size: 18px;
            font-weight: bold;
            padding: 8px 16px;
            border: 1px solid #ccc;
            border-radius: 6px;
            box-shadow: 0 0 8px rgba(0,0,0,0.1);
            z-index: 10;
        }


        .modal-row.selected {
            background-color: #009999;
            color: white;
            font-weight: bold;
        }

        .modal-header {
            background: #009999;
            color: white;
            padding: 10px 20px;
            font-size: 18px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-table-header, .modal-row {
            display: grid;
            grid-template-columns: 1fr 4fr 2fr 1fr 1fr 2fr;
            padding: 10px;
            text-align: center;
        }

        .modal-table-header {
            background: #ffffff;
            color: #009999;
            font-weight: bold;
            border-bottom: 1px solid #ccc;
        }

        .modal-row {
            background: #e0f7f7;
            border-bottom: 1px solid #ccc;
        }

            .modal-row:hover {
                background: #d0f0f0;
                cursor: pointer;
            }

        .selected-billing-row {
            background-color: #009999 !important;
        }

            .selected-billing-row input {
                background-color: #009999 !important;
                color: white !important;
            }

        .modal-close {
            background: white;
            border: none;
            color: #009999;
            font-weight: bold;
            font-size: 16px;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 5px;
        }

            .modal-close:hover {
                background: #eee;
            }
    </style>
</head>
<body>

    <div class="header">
        <div>Counter Sale [Multi Customers]</div>
        <div>@now</div>
    </div>

    <div class="nav-row">
        <div>Customer</div>
        <div>Item Description</div>
        <div>Batch</div>
        <div>STRI</div>
        <div>MRP</div>
        <div>Discount</div>
        <div>Amount</div>
    </div>

    <form method="post" id="saleForm">
        <div id="rowsContainer">
            <div class="row " id="row-1">
                <div class="sn"> </div>
                <input type="text" class="item" placeholder="Enter item">
                <input type="text" class="batch" placeholder="Batch">
                <input type="text" class="strip" placeholder="Strip">
                <input type="number" class="mrp" placeholder="0.00">
                <input type="number" class="disc" placeholder="0%">
                <input type="number" class="amt" placeholder="0.00" readonly>
            </div>

        </div>
    </form>

    <div class="footer-bar">
        <div class="shortcuts">
            F1:Help&nbsp;&nbsp;&nbsp;F2:Sale&nbsp;&nbsp;&nbsp;F3:Less&nbsp;&nbsp;&nbsp;F4:Purc&nbsp;&nbsp;&nbsp;F5:Add&nbsp;&nbsp;&nbsp;F10:Bill
        </div>
    </div>

    <div class="total-box">
        <span class="label">Total:</span>
        ₹<span id="totalAmount">0.00</span>
    </div>

    <!-- MODAL -->
    <!-- MODAL -->
    <div id="stockModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <div>Stock View</div>
                <button class="modal-close" onclick="closeModal()">Close</button>
            </div>
            <div class="modal-table-header">
                <div>Sr No</div>
                <div>Item Name</div>
                <div>Batch</div>
                <div>Qty</div>
                <div>MRP</div>
                <div>Expiry</div>
            </div>

            <!-- ADD THIS -->
            <div id="stockList"></div>
            <!-- REMOVE OLD STATIC .modal-row entries -->
        </div>
    </div>


    <script>
        let selectedRowIndex = 0, activeRow = null, modalVisible = false;
        let stockData = [];
        let previousQuantities = {};

        window.onload = () => {
            const billingRow = document.querySelector("#row-1");
            setupRowEvents(billingRow);
            billingRow.querySelector(".item").focus();
            fetchStock();
        };

        async function fetchStock() {
            try {
                const res = await fetch('/Sale/GetStock');
                if (res.ok) {
                    stockData = await res.json();
                    console.log("✅ Stock Data:", stockData);
                } else {
                    console.warn("⚠️ Stock fetch failed:", res.status);
                }
            } catch (e) {
                console.error('❌ Fetch error:', e);
            }
        }

        async function openModal() {
            try {
                const res = await fetch('/Sale/GetStock');
                if (res.ok) {
                    stockData = await res.json();
                    modalVisible = true;
                    document.getElementById("stockModal").style.display = "flex";
                    renderStockModal();
                    highlightRow(0);
                } else {
                    alert("Could not load stock.");
                }
            } catch (e) {
                console.error("❌ Modal open error:", e);
            }
        }

        function renderStockModal() {
            const list = document.getElementById("stockList");
            list.innerHTML = '';
            stockData.forEach((m, idx) => {
                const row = document.createElement('div');
                row.className = 'modal-row';
                row.dataset.idx = idx;
                row.innerHTML = `
                    <div>${idx + 1}</div>
                    <div>${m.name}</div>
                    <div>${m.batchNo}</div>
                    <div>${m.totalQuantity}</div>
                    <div>₹${parseFloat(m.costPrice).toFixed(2)}</div>
                    <div>${new Date(m.expiryDate).toLocaleDateString('en-GB', { month: '2-digit', year: 'numeric' })}</div>`;
                row.onclick = () => selectFromModal(idx);
                list.appendChild(row);
            });
        }

        function selectFromModal(idx) {
            const m = stockData[idx];
            if (!activeRow) return;

            const rowId = activeRow.id;
            previousQuantities[rowId] = 0;

            activeRow.querySelector('.item').value = m.name;
            activeRow.querySelector('.batch').value = m.batchNo;
            activeRow.querySelector('.mrp').value = m.costPrice;
            activeRow.querySelector('.strip').value = '';
            activeRow.querySelector('.disc').value = '';
            activeRow.querySelector('.amt').value = '';
            activeRow.querySelector('.strip').focus();
            closeModal();
        }

        function closeModal() {
            modalVisible = false;
            document.getElementById("stockModal").style.display = "none";
        }

        function setupRowEvents(row) {
            const inputs = row.querySelectorAll("input");

            inputs.forEach((input, index) => {
                input.onfocus = () => {
                    document.querySelectorAll(".row").forEach(r => r.classList.remove("selected-billing-row"));
                    row.classList.add("selected-billing-row");

                    const rowId = row.id;
                    if (!(rowId in previousQuantities)) {
                        const strip = parseFloat(row.querySelector(".strip").value) || 0;
                        previousQuantities[rowId] = strip;
                        console.log(`[focus] ${rowId} init prevQty = ${strip}`);
                    }
                };

                input.onkeypress = e => {
                    if (e.key === "+" || e.key === "-") e.preventDefault();
                };

                input.onkeydown = e => {
                    if (modalVisible) return;
                    const rows = [...document.querySelectorAll(".row")];
                    const i = rows.indexOf(row);

                    if (["ArrowUp", "ArrowDown"].includes(e.key)) {
                        e.preventDefault();
                        const target = rows[i + (e.key === "ArrowDown" ? 1 : -1)];
                        if (target) target.querySelector(".item").focus();
                    }

                    if (e.key === "Enter") {
                        e.preventDefault();

                        if (input.classList.contains("item")) {
                            activeRow = row;
                            return setTimeout(openModal, 10);
                        }

                        if (input.classList.contains("disc")) {
                            const strip = parseFloat(row.querySelector(".strip").value) || 0;
                            const mrp = parseFloat(row.querySelector(".mrp").value) || 0;
                            const disc = parseFloat(input.value) || 0;
                            const amt = strip * mrp * (1 - disc / 100);
                            row.querySelector(".amt").value = amt.toFixed(2);
                            updateTotal();

                            const itemName = row.querySelector(".item").value.trim();
                            const batch = row.querySelector(".batch").value.trim();
                            const rowId = row.id;
                            const prevQty = previousQuantities[rowId] || 0;

                            if (itemName && batch) {
                                if (prevQty > 0) updateStock(itemName, batch, prevQty, true);
                                if (strip > 0) {
                                    updateStock(itemName, batch, strip, false);
                                    previousQuantities[rowId] = strip;
                                }
                            }

                            const nextRow = createOrGetRow(i + 1);
                            nextRow.querySelector(".item").focus();
                        } else {
                            const nextInput = inputs[index + 1];
                            if (nextInput) nextInput.focus();
                        }
                    }
                };
            });
        }

        function createOrGetRow(i) {
            const rows = document.querySelectorAll('.row');
            if (rows[i]) return rows[i];

            const clone = rows[rows.length - 1].cloneNode(true);
            clone.id = `row-${i + 1}`;
            [...clone.querySelectorAll('input')].forEach(i => i.value = '');
            clone.querySelector('.sn').textContent = '';
            clone.classList.remove('selected-row', 'selected-billing-row');
            document.getElementById('rowsContainer').appendChild(clone);
            setupRowEvents(clone);
            return clone;
        }

        function highlightRow(idx) {
            document.querySelectorAll('.modal-row').forEach(r => r.classList.remove('selected'));
            const row = document.querySelector(`.modal-row[data-idx="${idx}"]`);
            if (row) {
                row.classList.add('selected');
                row.scrollIntoView({ block: 'nearest' });
                selectedRowIndex = idx;
            }
        }

        function updateTotal() {
            const total = [...document.querySelectorAll('.amt')]
                .reduce((acc, el) => acc + (parseFloat(el.value) || 0), 0);
            document.getElementById('totalAmount').textContent = total.toFixed(2);
        }

        function updateStock(name, batchNo, quantity, add = false) {
            const payload = { name, batchNo, quantity };
            fetch(`/Sale/UpdateStock?add=${add}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(async res => {
                const msg = await res.text();
                if (res.ok) {
                    console.log(`${add ? "➕" : "➖"} ${quantity} ${name} [${batchNo}] → ${msg}`);
                } else {
                    console.warn("❌ Update failed:", msg);
                }
            })
            .catch(err => console.error("❌ Stock update error:", err));
        }

        document.addEventListener('keydown', e => {
            if (modalVisible) return;

            if (e.key === 'F10') {
                e.preventDefault();
                const selected = [...document.querySelectorAll('.selected-row')];
                if (!selected.length) return alert("No items selected to print.");

                const items = selected.map((row, idx) => ({
                    SrNo: idx + 1,
                    Product: row.querySelector('.item').value,
                    Batch: row.querySelector('.batch').value,
                    Strip: parseInt(row.querySelector('.strip').value) || 0,
                    Mrp: parseFloat(row.querySelector('.mrp').value) || 0,
                    Disc: parseFloat(row.querySelector('.disc').value) || 0,
                    Amt: parseFloat(row.querySelector('.amt').value) || 0
                }));

                fetch('/Sale/PreparePrintBill', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(items)
                })
                .then(res => {
                    if (res.ok) window.location.href = '/Sale/PrintBill';
                    else alert("❌ Failed to prepare bill.");
                })
                .catch(err => {
                    console.error("❌ F10 error:", err);
                    alert("Error sending data.");
                });
                return;
            }

            if (e.key === '+' || e.key === '-') {
                e.preventDefault();
                const active = document.querySelector('.selected-billing-row');
                if (!active) return;

                if (e.key === '+') active.classList.add('selected-row');
                else active.classList.remove('selected-row');

                const sum = [...document.querySelectorAll('.selected-row .amt')]
                    .reduce((acc, el) => acc + (parseFloat(el.value) || 0), 0);
                document.getElementById('selectedTotal').textContent = sum.toFixed(2);

                const rows = [...document.querySelectorAll('.row')];
                const i = rows.indexOf(active);
                const nxt = rows[i + 1] || createOrGetRow(i + 1);
                nxt.querySelector(".item").focus();
            }
        });

        document.addEventListener('keydown', e => {
            if (!modalVisible) return;
            if (['ArrowUp', 'ArrowDown', 'Enter', 'Escape'].includes(e.key)) {
                e.preventDefault();
                if (e.key === 'ArrowDown') highlightRow(Math.min(stockData.length - 1, selectedRowIndex + 1));
                if (e.key === 'ArrowUp') highlightRow(Math.max(0, selectedRowIndex - 1));
                if (e.key === 'Enter') selectFromModal(selectedRowIndex);
                if (e.key === 'Escape') closeModal();
            }
        });
    </script>




    <div id="selectedTotalBox">
        Selected Total: ₹<span id="selectedTotal">0.00</span>
    </div>




</body>
</html>